# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# !! I used this link as guidelines  https://medium.com/@sharmapraveen91/automate-flutter-ci-cd-with-github-actions-android-ios-testflight-deployment-89a1c903721a
# TODO Add later IOS if needed/firebase testers ^^


name: Flutter CI/CD

on:
  push:
    branches: [ "main", "dev" ]
    # feature/* 
    # Removed feature check to save up free minutes
  pull_request:
    branches: [ "main", "dev" ]

jobs:
  build:
    name: Customer app pipelines (android)
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.4'
          channel: stable

      - name: Install dependencies
        run: flutter  pub get

      # Uncomment this step to verify the use of 'dart format' on each commit.
      # - name: Verify formatting
      #   run: dart format --output=none --set-exit-if-changed .

      # Consider passing '--fatal-infos' for slightly stricter analysis.



      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
         accept-android-sdk-licenses: true



    # !! This left out for now as i am currently developing solo
    # TODO Make later that when you commit it runs automatic  dart format . so this will not break everytime.
      # - name: Check formatting
      #   run: dart format --output=none --set-exit-if-changed .
      
      - name: Analyze project source
        run: flutter  analyze


      - name: Analyze code
        run: flutter analyze 



      # Your project will need to have tests in test/ and a dependency on
      # package:test for this step to succeed. Note that Flutter projects will
      # want to change this to 'flutter test'.
      - name: Run tests
        run: flutter  test

          # !! Add this when using android, windows, emulator
      # - name: Run intergration tests
      #   run: flutter test integration_test  -d Linux. 
      - name: Build App Bundle
        run: flutter build appbundle --release
     
     
     
      - name: Build APK 
        run: flutter build apk --release 

    

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
           name: android-apk
           path: build/app/outputs/flutter-apk/app-release.apk
  build-ios:
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
    name: Build iOS
    runs-on: macos-latest
    # needs: build    //!! add this if minutes goes too fast to 2k

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.4'

      - name: Install dependencies
        run: flutter pub get

      - name: List available simulators
        run: xcrun simctl list devices

      - name: Boot iOS simulator
        run: |
           xcrun simctl list devices available
           DEVICE_ID=$(xcrun simctl create test_device com.apple.CoreSimulator.SimDeviceType.iPhone-15 com.apple.CoreSimulator.SimRuntime.iOS-17-0)
           xcrun simctl boot $DEVICE_ID
            xcrun simctl bootstatus $DEVICE_ID -b
            echo "DEVICE_ID=$DEVICE_ID" >> $GITHUB_ENV

      - name: Run integration tests
        run: flutter test integration_test/ -d $DEVICE_ID

      - name: Build iOS (no code signing)
        run: flutter build ios --release --no-codesign
