# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# !! Use this link as guidelines  https://medium.com/@sharmapraveen91/automate-flutter-ci-cd-with-github-actions-android-ios-testflight-deployment-89a1c903721a
# TODO Add later IOS if needed/firebase testers ^^


name: Flutter CI/CD

on:
  push:
    branches: [ "main", "dev" ]
  pull_request:
    branches: [ "main", "dev" ]

jobs:
  build:
    name: Build Android APK
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.4'
          channel: stable

      - name: Install dependencies
        run: flutter  pub get

      # Uncomment this step to verify the use of 'dart format' on each commit.
      # - name: Verify formatting
      #   run: dart format --output=none --set-exit-if-changed .

      # Consider passing '--fatal-infos' for slightly stricter analysis.



      - name: Check formatting
        run: dart format --output=none --set-exit-if-changed .
      
      - name: Analyze project source
        run: flutter  analyze


      - name: Analyze code
        run: flutter analyze 


      - name: Security audit
        run: flutter pub deps --json | dart pub global run pana --json

      # Your project will need to have tests in test/ and a dependency on
      # package:test for this step to succeed. Note that Flutter projects will
      # want to change this to 'flutter test'.
      - name: Run tests
        run: flutter  test


      - name: Build App Bundle
        run: flutter build appbundle --release
     
     
     
      - name: Build APK 
        run: flutter build apk --release 

    

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
        name: android-apk
        path: build/app/outputs/flutter-apk/app-release.apk
